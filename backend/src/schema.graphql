type Query {
  userLogin(userAccount: String, userPassword: String): User
  initUserNotification(userID: String): [NotificationTask] # ok
  initUserAchievement(userID: String): [userAchievement]
  initUserTodo(_id: ID): Todo
  initUserEvent(userID: String): [DashboardEvent]
  initMember(teamID: String): [User]!
  initScore(teamID: String): [Contest]!
  initGallery(teamID: String): [Gallery]!
  initGantt(teamID: String): [Gantt]!
  users(query: String): [User]
  teams(query: String): [Team]
  initTeam(userID: String): [Team]!
  initTeamEvent(_id: ID): [Event]!
  initTeamPost(_id: ID): [Post]!
  initVote(_id: ID): [Vote]!
  myUserAccount(userID: String): User
}

type Mutation {
  createUser(userAccount: String, userPassword: String, userEmail: String): User
  createUserTodo(userID: String, todoContent: String): Todo

  createScore( # ok
    teamID: String
    contestDate: Int!
    contestOpponent: String!
    contestIsWin: Boolean!
    contestTitle: String!
  ): Contest!
  createScoreDetail(
    contestScoreSet: ID!
    contestScoreItem: [String!]!
  ): ContestScoreSet!
  createGallery(teamID: String!, galleryTitle: String!): Gallery! # ok
  createGantt(teamID: String!, ganttTitle: String!): Gantt! # ok
  ## --------- Team ----------##

  createTeam(
    teamName: String!
    teamDescription: String!
    teamType: String!
    creatorID: String! # ** 修正= > User?
  ): Team

  deleteTeam(teamID: String!, memberID: String!): Team

  ##---------- Team Event, Reply (完成) ----------##

  createTeamEvent(
    eventTitle: String!
    eventDescription: String!
    eventStart: String!
    eventEnd: String
    eventLocation: String
    teamID: String!
    creatorID: String!
  ): Event!
  replyTeamEvent(
    eventReplyOption: String!
    eventReplyContent: String
    memberID: String!
    eventID: String!
  ): EventReply

  updateTeamEvent(
    eventTitle: String
    eventDescription: String
    eventStart: String
    eventEnd: String
    eventLocation: String
    eventID: String
  ): Event
  updateEventReply(
    eventReplyOption: String
    eventReplyContent: String
    eventReplyID: String
  ): EventReply

  deleteEventReply(eventReplyID: String, eventID: String): Event
  deleteEvent(eventID: String, teamID: String): Team

  ##---------- Team Post (完成) ----------##

  createPost(
    postTitle: String!
    postContent: String!
    teamID: String!
    creatorID: String!
  ): Post

  updatePost(postTitle: String, postContent: String, postID: String): Post

  deletePost(postID: String, teamID: String): Team

  ##---------- Team Vote, Option (完成) ----------##

  createVote(
    voteTitle: String!
    voteDescription: String!
    voteEnd: String!
    voteLimit: Int
    teamID: String!
    creatorID: String!
  ): Vote
  createVoteOption(voteOptionName: String!, voteID: String!): VoteOption

  updateVote(
    voteTitle: String
    voteDescription: String
    voteEnd: String
    voteLimit: Int
    voteID: String
  ): Vote
  updateVoteOption(voteOptionName: String, voteOptionID: String): VoteOption

  replyVote(voteOptionID: String, voterID: String): VoteOption

  deleteVoteOption(voteOptionID: String, voteID: String): Vote
  deleteVote(voteID: String, teamID: String): Team

  ##------------------------------##

  updateUserNotification(
    userID: String
    time: Int
    type: String
    content: String
  ): String
  updateUserAchievement(userID: String, title: String, content: String): String

  createUserEvent(
    eventCreator: String
    eventID: String
    eventTitle: String
    eventDescription: String
    eventStart: Float
    eventEnd: Float
    eventLocation: String
    eventPostTime: Int
  ): String
}

type Subscription {
  testSubscription: String
}

type User {
  _id: ID!
  userID: String
  userAccount: String
  userPassword: String
  userEmail: String
  userName: String
  userBirthday: Int
  userStatus: String
  userProfile: String
  allTeams: [Team]
  userTodo: [Todo]
  # userEvent: [DashboardEvent]!
  # userTodo: [Todo!]!
  # userPlaySet: [UserPlaySet]!
  # userAchievement: [Achievement]!
}

type Todo {
  userID: String
  todoID: String
  todoDone: Boolean
  todoDeleted: Boolean
  todoContent: String
}

type NotificationTask {
  taskID: String
  taskTime: Int
  taskType: String
  taskContent: String
}

type DashboardEvent {
  eventID: ID!
  eventTitle: String!
  eventDescription: String
  eventStart: Float!
  eventEnd: Float!
  eventLocation: String
  eventPostTime: Float
}

type UserPlaySet {
  userPlaySetID: ID!
  playSetUser: User!
  scoreDetail: [Int!]!
}

type userAchievement {
  userID: String!
  userAchievementID: String!
  userAchievementTitle: String!
  userAchievementContent: String
}

type Team {
  teamID: String!
  teamName: String
  teamDescription: String
  teamType: String
  teamCreateTime: String
  teamMember: [User]
  teamGallery: [Gallery]
  teamPost: [Post]
  teamGantt: [Gantt]
  teamScore: [Contest]
  teamVote: [Vote]
  teamEvent: [Event]
}

type Gallery {
  teamID: String!
  galleryID: ID!
  galleryTitle: String!
  original_url: [String!]!
  thumbnail_url: [String!]!
}

type Post {
  postID: String!
  postTitle: String
  postContent: String
  postAuthor: User
  postTime: String
}

type Gantt {
  teamID: String!
  ganttID: ID!
  ganttTitle: String!
  ganttTaskID: [GanttTask]!
}

type GanttTask {
  ganttTaskID: ID!
  dateStart: Int!
  dateEnd: Int!
  duration: Int!
  percComplete: Float!
  dependencies: String!
}

type Contest {
  teamID: String!
  contestID: String!
  contestTitle: String!
  contestMyTeamID: String!
  contestDate: Int!
  contestOpponent: String!
  contestIsWin: Boolean!
  contestScoreSet: [ContestScoreSet!]
  contestScoreItem: [String!]
}

type ContestScoreSet {
  contestScoreID: String!
  myTeamScore: Int!
  opponentScore: Int!
  userPlaySet: [UserPlaySet!]
}

type Vote {
  voteID: String
  voteTitle: String
  voteDescription: String
  voteEnd: String
  voteLimit: Int
  voteCreator: User
  voteOption: [VoteOption]
  voteCreateTime: String
}

type VoteOption {
  voteOptionID: String
  voteOptionName: String
  votedUser: [User]
}

type Event {
  eventID: String
  eventTitle: String
  eventDescription: String
  eventStart: String
  eventEnd: String
  eventLocation: String
  eventCreator: User
  eventPostTime: String
  eventReply: [EventReply]
}

type EventReply {
  eventReplyID: String
  eventReplyMemeber: User
  eventReplyOption: EventReplyOption
  eventReplyContent: String
  eventReplyTime: String
}

input CreateGalleryInput {
  galleryTitle: String!
}

enum EventReplyOption {
  Yes
  No
  Unsure
}
